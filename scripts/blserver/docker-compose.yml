version: '3.5'

services:
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.14
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - default

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    # In production Comment this Out!
    ports:
      - "9001:9001"
      - "9000:9000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - default

  minio-proxy:
    container_name: minio-proxy
    image: nginx:latest
    depends_on:
      - minio
    ports:
      - "7080:7080"
      - "7443:7443"
    volumes:
      -  ${DOCKER_VOLUME_DIRECTORY:-.}/configs/minio-proxy.conf:/etc/nginx/nginx.conf:ro
      -  ${DOCKER_VOLUME_DIRECTORY:-.}/configs/minio-proxy.crt:/etc/nginx/certs/server.crt:ro
      -  ${DOCKER_VOLUME_DIRECTORY:-.}/configs/minio-proxy.key:/etc/nginx/certs/server.key:ro
    networks:
      - default

  milvus:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.5.1
    command: ["milvus", "run", "standalone"]
    security_opt:
    - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
      - ${DOCKER_VOLUME_DIRECTORY:-.}/configs/milvus.yaml:/milvus/configs/milvus.yaml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    # In production Comment this Out!
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - default

  attu:
    container_name: milvus-attu
    image: zilliz/attu:latest
    environment:
      MILVUS_URL: milvus:19530
    # In production Comment this Out!
    ports:
      - "3000:3000"
    depends_on:
      - "milvus"
    networks:
      - default

  attu-proxy:
    container_name: attu-proxy
    image: nginx:latest
    depends_on:
      - attu
    ports:
      - "8080:8080"
      - "8443:8443"
    volumes:
      -  ${DOCKER_VOLUME_DIRECTORY:-.}/configs/attu-proxy.conf:/etc/nginx/nginx.conf:ro
      -  ${DOCKER_VOLUME_DIRECTORY:-.}/configs/attu-proxy.crt:/etc/nginx/certs/server.crt:ro
      -  ${DOCKER_VOLUME_DIRECTORY:-.}/configs/attu-proxy.key:/etc/nginx/certs/server.key:ro
    networks:
      - default

  blserver:
    container_name: blserver
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      CONFIG: /app/config.toml
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/configs/blserver.toml:/app/config.toml
    command: >
          bash -c "while true; do sleep 5; gunicorn -w 4 -b 0.0.0.0:5000 'blserver:create_app(config=\"/app/config.toml\")'; done"
    # In production Comment this Out!
    ports:
      - "5000:5000"
    depends_on:
      - "milvus"
      - "minio"
    networks:
      - default

  blserver-proxy:
    container_name: blserver-proxy
    image: nginx:latest
    depends_on:
      - blserver
    ports:
      - "80:80"
      - "443:443"
    volumes:
      -  ${DOCKER_VOLUME_DIRECTORY:-.}/configs/blserver-proxy.conf:/etc/nginx/nginx.conf:ro
      -  ${DOCKER_VOLUME_DIRECTORY:-.}/configs/blserver-proxy.crt:/etc/nginx/certs/server.crt:ro
      -  ${DOCKER_VOLUME_DIRECTORY:-.}/configs/blserver-proxy.key:/etc/nginx/certs/server.key:ro
    networks:
      - default

  jupyterhub:
    image: jupyterhub/jupyterhub:latest
    container_name: jupyterhub
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/jupyterhub/:/srv/jupyterhub/
      - ${DOCKER_VOLUME_DIRECTORY:-.}/configs/jupyterhub.py:/srv/jupyterhub/jupyterhub.py:ro
    # In production Comment this Out!
    ports:
      - "8000:8000"
    entrypoint: >
      /bin/bash -c "
      if [ ! -f /srv/jupyterhub/setup_done ]; then
        pip install jupyterlab &&
        if ! id admin >/dev/null 2>&1; then
          useradd -m -s /bin/bash admin &&
          echo 'admin:admin' | chpasswd;
        fi &&
        mkdir -p /srv/jupyterhub/notebooks/ &&
        chown root:root /srv/jupyterhub/notebooks/ &&
        chmod 777 -R /srv/jupyterhub/notebooks/ &&
        touch /srv/jupyterhub/setup_done;
      fi &&
      jupyterhub --config /srv/jupyterhub/jupyterhub.py"
    restart: always
    networks:
      - default

  jupyterhub-proxy:
    container_name: jupyterhub-proxy
    image: nginx:latest
    depends_on:
      - jupyterhub
    ports:
      - "6080:6080"
      - "6443:6443"
    volumes:
      -  ${DOCKER_VOLUME_DIRECTORY:-.}/configs/jupyterhub-proxy.conf:/etc/nginx/nginx.conf:ro
      -  ${DOCKER_VOLUME_DIRECTORY:-.}/configs/jupyterhub-proxy.crt:/etc/nginx/certs/server.crt:ro
      -  ${DOCKER_VOLUME_DIRECTORY:-.}/configs/jupyterhub-proxy.key:/etc/nginx/certs/server.key:ro
    networks:
      - default

networks:
  default:
    name: binlex
