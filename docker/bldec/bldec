#!/usr/bin/env python
import io
import os
import sys
import configparser
import argparse
import time
import json
import logging
import pybinlex
from hashlib import sha256
from libblapi.minio import MinIOHandler
from libblapi.amqp import AMQPHandler

log = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

__author__  = 'c3r3b3ru5'
__version__ = '1.1.1'

class BLDEC():

    """
    A Binlex Decompile Worker
    """

    def __init__(self):
        self.amqp = None
        self.minio = None
        self.config = None

    def find_traits(self, file_processor, data, file_type, architecture):
        decompiler = pybinlex.Decompiler(file_processor)
        file_hash = sha256(data).hexdigest()

        byte_file = open(file_hash, 'wb')
        byte_file.write(data)
        byte_file.close()

        if file_type != "raw":
            result = file_processor.read_file(os.path.join('/opt/binlex/docker/bldec/', file_hash))
        else:
            result = file_processor.read_file(str(os.path.join('/opt/binlex/docker/bldec/', file_hash)), 0)

        if result is False:
             return result

        sections = file_processor.get_sections()
        if architecture == 'x86':
            decompiler.setup(pybinlex.cs_arch.CS_ARCH_X86, pybinlex.cs_mode.CS_MODE_32)
        elif architecture == 'x86_64':
            decompiler.setup(pybinlex.cs_arch.CS_ARCH_X86, pybinlex.cs_mode.CS_MODE_64)
        for i in range(0, len(sections)):
            if file_type != "raw":
                decompiler.append_queue(sections[i]['functions'],
                                    pybinlex.DECOMPILER_OPERAND_TYPE.DECOMPILER_OPERAND_TYPE_FUNCTION, i)
            else:
                decompiler.append_queue({0}, pybinlex.DECOMPILER_OPERAND_TYPE.DECOMPILER_OPERAND_TYPE_FUNCTION, 0)
            decompiler.decompile(sections[i]['data'], sections[i]['offset'], i)
        traits = decompiler.get_traits()

        os.remove(str(os.path.join('/opt/binlex/docker/bldec/', file_hash)))

        return traits, file_hash

    def decompile_raw(self, data, architecture, file_type):

        raw = pybinlex.Raw()

        return self.find_traits(raw, data, file_type, architecture)

    def decompile_pe(self, data, architecture, file_type):
        pe = pybinlex.PE()
        if architecture == 'x86':
            pe.setup(pybinlex.MACHINE_TYPES.IMAGE_FILE_MACHINE_I386)
        if architecture == 'x86_64':
            pe.setup(pybinlex.MACHINE_TYPES.IMAGE_FILE_MACHINE_AMD64)

        return self.find_traits(pe, data, file_type, architecture)

    def decompile_elf(self, data, architecture, file_type):
        elf = pybinlex.ELF()
        if architecture == 'x86':
            elf.setup(pybinlex.ARCH.EM_386)
        if architecture == 'x86_64':
            elf.setup(pybinlex.ARCH.EM_X86_64)

        return self.find_traits(elf, data, file_type, architecture)

    def arguments(self):
        parser = argparse.ArgumentParser(
            prog=f'bldec v{__version__}',
            description="A Binlex Decompile Worker",
            epilog=f'Author: {__author__}'
        )
        parser.add_argument(
            '--version',
            action='version',
            version=f'v{__version__}'
        )
        parser.add_argument(
            '-c',
            '--config',
            default=None,
            required=True,
            help='Configuration File'
        )
        args = parser.parse_args()
        self.config = configparser.ConfigParser()
        self.config.read(args.config)
        self.minio = MinIOHandler(self.config)
        self.amqp = AMQPHandler(self.config)

    def process(self, ch, method, properties, body):
        try:
            data = json.loads(body)
            log.info("processing "+str(data))
            file_type = data['mode'].split(':')[0]

            response = self.minio.download(
                bucket_name=data['corpus'],
                object_name=data['object_name'])

            binary_data = io.BytesIO(response.data).read()

            response.close()
            response.release_conn()

            architecture = data['mode'].split(':')[1]

            if file_type == 'pe':
                traits, file_hash = self.decompile_pe(binary_data, architecture, file_type)
            elif file_type == 'elf':
                traits, file_hash = self.decompile_elf(binary_data, architecture, file_type)
            elif file_type == 'raw':
                traits, file_hash = self.decompile_raw(binary_data, architecture, file_type)
            else:
                raise Exception('unknown file format')

            log.info("Found "+str(len(traits))+" traits for "+file_hash)

            for trait in traits:
                trait['file_sha256'] = file_hash
                trait['architecture'] = architecture
                trait['corpus'] = data['corpus']
                del trait['tags']
                self.amqp.publish(
                    self.config['amqp'].get('traits_queue'),
                    json.dumps(trait))

            self.minio.delete(
                bucket_name=self.config['amqp'].get('decomp_queue'),
                object_name=data['object_name'])

            log.info("Done publishing traits to queue for " + file_hash)

        except Exception:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            log.error(exc_type, fname, exc_tb.tb_lineno)
        ch.basic_ack(method.delivery_tag)

    def main(self):
        self.arguments()
        self.amqp.consume(
            self.config['amqp'].get('decomp_queue'),
            self.process)

if __name__ in '__main__':
    try:
        bldec = BLDEC()
        bldec.main()
    except KeyboardInterrupt:
        print('keyboard interrupt, exiting...')
